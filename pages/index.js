import Head from "next/head";
import { useEffect, useState, useRef } from "react";
import Web3, { utils } from "web3";
import WalletConnectProvider from "@walletconnect/web3-provider";
import { InjectedConnector } from "@web3-react/injected-connector";
import { WalletConnectConnector } from "@web3-react/walletconnect-connector";
import { Web3ReactProvider, useWeb3React } from "@web3-react/core";
import cn from "classnames";
import debounce from "debounce";

const contractAddress =
  process.env.NODE_ENV === "production"
    ? "0x1397B6CAe248018ceCe9A0Df060cB438bd43F37B"
    : "0x1397B6CAe248018ceCe9A0Df060cB438bd43F37B";

const soldOut = false; // omg!

const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] });
const wcConnector = new WalletConnectConnector({
  infuraId: "cddde80366fc42c2ac9202c6a0f9850b",
});

function getLibrary(provider) {
  return new Web3(provider);
}

// const abi = [
//   {
//     inputs: [
//       {
//         internalType: "address",
//         name: "walletAddress",
//         type: "address",
//       },
//     ],
//     name: "craftForFriend",
//     outputs: [],
//     type: "function",
//   },
//   {
//     inputs: [],
//     name: "craftForSelf",
//     outputs: [],
//     type: "function",
//   },
//   {
//     inputs: [],
//     name: "currentYearTotalSupply",
//     outputs: [
//       {
//         internalType: "uint256",
//         name: "",
//         type: "uint256",
//       },
//     ],
//     type: "function",
//   },
// ];

const abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "approved",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "walletAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "craftForFriend",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "craftForSelf",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "seed",
				"type": "string"
			}
		],
		"name": "getAColor",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getApproved",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getCoreSize",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "mainColor",
				"type": "string"
			}
		],
		"name": "getPetals",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerOf",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "price",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "_data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "newPrice",
				"type": "uint256"
			}
		],
		"name": "setPrice",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "tokenByIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "tokenOfOwnerByIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "tokenURI",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "withdrawAll",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	}
];

export default function WrappedHome() {
  return (
    <Web3ReactProvider getLibrary={getLibrary}>
      <Home />
    </Web3ReactProvider>
  );
}

function Home() {
  const { activate, active, account, library } = useWeb3React();
  console.log(account);
  const [working, setWorking] = useState(false);
  const [contract, setContract] = useState(null);
  const [error, setError] = useState(null);
  const [yearTotal, setYearTotal] = useState(0);
  // const [friendAddress, setFriendAddress] = useState("");
  // const [realFriendAddress, setRealFriendAddress] = useState("");
  const [transactionHash, setTransactionHash] = useState(null);
  // const friendField = useRef();

  useEffect(() => {
    if (!library) return;

    const contract = new library.eth.Contract(abi, contractAddress);
    console.log(contract)
    setContract(contract);

    // contract.methods
    //   .currentYearTotalSupply()
    //   .call()
    //   .then((res) => {
    //     setYearTotal(res);
    //   }, handleError);

    setWorking(false);
  }, [account]);

  // useEffect(() => {
  //   if (!friendAddress) return;

  //   if (friendAddress.match(/0x[a-fA-F0-9]{40}/)) {
  //     setRealFriendAddress(friendAddress);
  //     return;
  //   }

  //   if (friendAddress.match(/\./)) {
  //     debouncedLookup();
  //   }
  // }, [friendAddress]);

  function handleError(err) {
    console.error(err);
    setWorking(false);
    setError(err);
  }

  function craftForSelf() {
    setWorking(true);
    console.log();
    contract.methods
      .craftForSelf('0x481C0121bE626ed5544249C9fE88Fef7C78e53dD')
      .send({ from: account, value: utils.toWei("0.02", "ether") })
      .then((res) => {
        console.log(res);
        setWorking(false);
        setTransactionHash(res.transactionHash);
      }, handleError);
  }

  // function craftForFriend() {
  //   if (!realFriendAddress) {
  //     friendField.current.focus();
  //   }

  //   setWorking(true);

  //   contract.methods
  //     .craftForFriend(realFriendAddress)
  //     .send({ from: account, value: utils.toWei("0.02", "ether") })
  //     .then((res) => {
  //       setWorking(false);
  //       setTransactionHash(res.transactionHash);
  //     }, handleError);
  // }

  // const debouncedLookup = debounce(async () => {
  //   setWorking(true);
  //   try {
  //     const address = await library.eth.ens.getAddress(friendAddress);
  //     setRealFriendAddress(address);
  //   } catch {}

  //   setWorking(false);
  // }, 1000);

  return (
    <main className="max-w-4xl mx-auto text-base md:text-2xl">
      <Head>
        <title>Flowers • For you, or a special someone in your life 🌼</title>
        <link rel="icon" href="/favicon.ico" sizes="any" />
        <link rel="icon" href="/icon.svg" type="image/svg+xml" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <link rel="manifest" href="/manifest.webmanifest" />
      </Head>

      <div className="p-5 md:p-16">
        <p className="text-sm mb-4">On-chain collective #1</p>
        <header className="leading-normal">
          <svg width="254" height="59" viewBox="0 0 254 59" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g filter="url(#filter0_d)">
            <mask id="path-1-outside-1" maskUnits="userSpaceOnUse" x="0.777344" y="0.490234" width="249" height="55" fill="black">
            <rect fill="white" x="0.777344" y="0.490234" width="249" height="55"/>
            <path d="M14.0312 5.95117C16.9935 5.95117 20.8216 5.9056 25.5156 5.81445C30.2096 5.67773 33.7415 5.60938 36.1113 5.60938C36.1569 6.0651 36.8177 9.4375 38.0938 15.7266C37.8659 15.9544 37.3418 16.0684 36.5215 16.0684C36.0202 16.0684 35.7012 15.9089 35.5645 15.5898C34.6986 13.8581 33.3314 12.377 31.4629 11.1465C29.5944 9.91602 27.7715 9.30078 25.9941 9.30078H23.3965C20.5254 9.30078 19.0443 9.59701 18.9531 10.1895C18.7253 11.2832 18.6113 13.0605 18.6113 15.5215V26.0488C18.6113 26.3223 19.5911 26.459 21.5508 26.459H25.1738C27.9993 26.459 29.5488 26.3678 29.8223 26.1855C30.0501 26.0033 30.2324 25.3424 30.3691 24.2031C30.4603 23.5195 30.597 22.8587 30.7793 22.2207C30.8249 21.9017 31.1667 21.7422 31.8047 21.7422C32.5794 21.7422 33.0807 21.8561 33.3086 22.084V35.0039C33.1263 35.1862 32.6478 35.2773 31.873 35.2773C31.2806 35.2773 30.916 35.0951 30.7793 34.7305C30.597 34.0924 30.4375 33.5456 30.3008 33.0898C30.1641 32.6341 30.0501 32.2923 29.959 32.0645C29.8678 31.8366 29.7539 31.6315 29.6172 31.4492C29.526 31.2669 29.4577 31.153 29.4121 31.1074C29.3665 31.0618 29.2754 31.0163 29.1387 30.9707C29.002 30.8796 28.9108 30.8112 28.8652 30.7656C28.2728 30.401 26.4954 30.2188 23.5332 30.2188C20.252 30.2188 18.6113 30.4238 18.6113 30.834V41.3613C18.6113 43.6855 18.7708 45.554 19.0898 46.9668C19.2266 47.5137 19.9785 47.9466 21.3457 48.2656C22.7129 48.5846 23.7383 48.7441 24.4219 48.7441C24.6042 48.7441 24.6953 49.1771 24.6953 50.043C24.6953 50.5898 24.6497 51 24.5586 51.2734C19.0898 51 15.6035 50.8633 14.0996 50.8633L4.11914 51.2734C3.93685 51.0911 3.8457 50.7038 3.8457 50.1113C3.8457 49.1999 3.93685 48.7441 4.11914 48.7441C4.66602 48.7441 5.50911 48.5846 6.64844 48.2656C7.83333 47.9466 8.49414 47.6048 8.63086 47.2402C8.9043 46.1921 9.04102 44.1868 9.04102 41.2246V15.3848C9.04102 12.8783 8.9043 11.1009 8.63086 10.0527C8.49414 9.68815 7.81055 9.27799 6.58008 8.82227C5.39518 8.36654 4.55208 8.13867 4.05078 8.13867C3.86849 8.13867 3.77734 7.72852 3.77734 6.9082C3.77734 6.17904 3.8457 5.74609 3.98242 5.60938C8.08398 5.83724 11.4336 5.95117 14.0312 5.95117Z"/>
            <path d="M46.7754 14.7012C46.7754 12.5592 46.6615 10.9186 46.4336 9.7793C46.2057 9.05013 45.0208 8.68555 42.8789 8.68555H42.2637C41.9902 8.68555 41.8535 8.22982 41.8535 7.31836C41.8535 6.54362 41.9902 6.15625 42.2637 6.15625C43.6764 6.01953 45.0892 5.83724 46.502 5.60938C47.9603 5.38151 49.1908 5.15365 50.1934 4.92578C51.196 4.69792 52.0846 4.47005 52.8594 4.24219C53.6797 4.01432 54.3177 3.83203 54.7734 3.69531L55.457 3.49023H55.5938C55.776 3.49023 55.9583 3.62695 56.1406 3.90039C56.3229 4.17383 56.4368 4.42448 56.4824 4.65234C55.9811 6.70312 55.7305 9.00456 55.7305 11.5566L55.6621 40.8145C55.6621 43.7311 55.8216 45.8047 56.1406 47.0352C56.2318 47.3542 56.8698 47.7188 58.0547 48.1289C59.2396 48.5391 60.0371 48.7441 60.4473 48.7441C60.584 48.7441 60.6523 49.1315 60.6523 49.9062C60.6979 50.6354 60.6751 51.0911 60.584 51.2734C60.0827 51.2279 58.6471 51.1367 56.2773 51C53.9531 50.8177 52.2669 50.7266 51.2188 50.7266C50.125 50.7266 48.416 50.8177 46.0918 51C43.7676 51.1367 42.3548 51.2279 41.8535 51.2734C41.6712 51.0911 41.5801 50.6354 41.5801 49.9062C41.5801 49.1315 41.6712 48.7441 41.8535 48.7441C42.3548 48.7441 43.1979 48.5391 44.3828 48.1289C45.5677 47.7188 46.2057 47.3542 46.2969 47.0352C46.6159 45.668 46.7754 43.9362 46.7754 41.8398V14.7012Z"/>
            <path d="M79.5195 24.2031C78.1979 24.2031 77.1042 24.7272 76.2383 25.7754C75.3724 26.8236 74.8027 28.0312 74.5293 29.3984C74.2559 30.7201 74.1191 32.2012 74.1191 33.8418C74.1191 43.0931 76.4661 47.7188 81.1602 47.7188C83.0742 47.7188 84.4642 46.7845 85.3301 44.916C86.2415 43.0475 86.6973 40.86 86.6973 38.3535C86.6973 28.9199 84.3047 24.2031 79.5195 24.2031ZM69.0605 24.9551C72.2051 21.9473 76.0104 20.4434 80.4766 20.4434C84.9427 20.4434 88.7253 21.9473 91.8242 24.9551C94.9688 27.9629 96.541 31.6315 96.541 35.9609C96.541 40.2904 94.9915 43.959 91.8926 46.9668C88.7936 49.9746 84.9883 51.4785 80.4766 51.4785C76.0104 51.4785 72.2051 49.9746 69.0605 46.9668C65.9616 43.959 64.4121 40.2904 64.4121 35.9609C64.4121 31.6315 65.9616 27.9629 69.0605 24.9551Z"/>
            <path d="M145.486 26.1855C145.486 25.1829 144.894 24.4538 143.709 23.998C142.524 23.5423 141.339 23.3145 140.154 23.3145H139.881C139.699 23.3145 139.585 22.9271 139.539 22.1523C139.493 21.3776 139.562 20.8991 139.744 20.7168C140.382 20.7624 141.772 20.8763 143.914 21.0586C146.102 21.2409 147.719 21.332 148.768 21.332C149.725 21.332 151.069 21.2409 152.801 21.0586C154.533 20.8763 155.763 20.7624 156.492 20.7168C156.629 21.127 156.697 21.5827 156.697 22.084C156.697 22.8587 156.606 23.2461 156.424 23.2461C155.923 23.2461 154.92 23.6107 153.416 24.3398C151.912 25.0234 150.978 25.7754 150.613 26.5957L139.334 50.3164C139.197 50.6354 138.855 50.9544 138.309 51.2734C137.807 51.5924 137.306 51.752 136.805 51.752C136.349 51.752 136.007 51.5013 135.779 51L127.645 33.3633L119.852 50.248C119.715 50.5671 119.419 50.8861 118.963 51.2051C118.507 51.5697 117.938 51.752 117.254 51.752C116.798 51.752 116.434 51.5013 116.16 51L104.607 25.5703C104.288 24.9323 103.628 24.4082 102.625 23.998C101.622 23.5423 100.848 23.3145 100.301 23.3145C100.118 23.3145 100.027 22.8815 100.027 22.0156C100.027 21.2865 100.096 20.8535 100.232 20.7168C100.779 20.7624 102.124 20.8763 104.266 21.0586C106.453 21.1953 108.094 21.2637 109.188 21.2637C110.19 21.2637 111.922 21.1725 114.383 20.9902C116.889 20.8079 118.325 20.7168 118.689 20.7168C118.781 20.9902 118.826 21.4688 118.826 22.1523C118.872 22.7904 118.826 23.1322 118.689 23.1777C118.143 23.1777 117.299 23.4056 116.16 23.8613C115.021 24.2715 114.451 24.7728 114.451 25.3652C114.451 25.9577 116.297 30.4694 119.988 38.9004C120.49 37.8066 121.082 36.5306 121.766 35.0723C122.495 33.5684 123.019 32.4974 123.338 31.8594C123.657 31.2214 123.976 30.515 124.295 29.7402C124.66 28.9655 124.887 28.3958 124.979 28.0312C125.115 27.6667 125.184 27.3932 125.184 27.2109C125.184 26.1172 125.024 25.3197 124.705 24.8184C124.386 24.3626 123.839 23.9525 123.064 23.5879C122.472 23.36 121.538 23.2461 120.262 23.2461C120.079 23.2461 119.965 22.8815 119.92 22.1523C119.92 21.3776 120.011 20.8991 120.193 20.7168C120.786 20.7624 122.107 20.8763 124.158 21.0586C126.255 21.1953 127.85 21.2637 128.943 21.2637C129.946 21.2637 131.609 21.1725 133.934 20.9902C136.303 20.8079 137.716 20.7168 138.172 20.7168C138.263 20.9447 138.263 21.446 138.172 22.2207C138.126 22.9499 138.035 23.3145 137.898 23.3145C137.124 23.3145 136.303 23.474 135.438 23.793C134.617 24.112 134.207 24.6361 134.207 25.3652C134.207 26.0488 135.984 30.5833 139.539 38.9688C140.359 37.1914 141.294 35.209 142.342 33.0215C143.436 30.834 144.233 29.2161 144.734 28.168C145.236 27.1198 145.486 26.459 145.486 26.1855Z"/>
            <path d="M174.812 24.2031C173.035 24.2031 171.736 25.069 170.916 26.8008C170.096 28.487 169.686 30.1504 169.686 31.791C169.686 32.0645 169.845 32.2012 170.164 32.2012H178.846C179.484 32.2012 179.803 31.7682 179.803 30.9023C179.803 29.1706 179.324 27.6211 178.367 26.2539C177.456 24.8867 176.271 24.2031 174.812 24.2031ZM175.154 20.4434C179.256 20.4434 182.537 21.8789 184.998 24.75C187.505 27.5755 188.758 30.4694 188.758 33.4316C188.758 34.4798 188.53 35.1634 188.074 35.4824C187.664 35.8014 186.821 35.9609 185.545 35.9609H170.096C169.822 35.9609 169.686 36.1204 169.686 36.4395C169.686 38.9004 170.369 41.1107 171.736 43.0703C173.149 45.0299 175.154 46.0098 177.752 46.0098C179.256 46.0098 180.691 45.8047 182.059 45.3945C183.426 44.9388 184.383 44.5514 184.93 44.2324C185.477 43.8678 186.206 43.3438 187.117 42.6602C187.527 42.8424 187.732 43.2754 187.732 43.959C187.732 44.5059 187.641 44.9616 187.459 45.3262C187.003 46.4199 185.636 47.7188 183.357 49.2227C181.079 50.7266 178.527 51.4785 175.701 51.4785C171.508 51.4785 167.885 49.9518 164.832 46.8984C161.824 43.8451 160.32 40.1764 160.32 35.8926C160.32 31.5176 161.688 27.849 164.422 24.8867C167.156 21.9245 170.734 20.4434 175.154 20.4434Z"/>
            <path d="M214.188 20.4434C216.193 20.4434 218.152 21.2865 220.066 22.9727C220.066 25.3424 219.77 27.097 219.178 28.2363C218.631 29.3757 217.605 29.9453 216.102 29.9453C215.19 29.9453 214.142 29.4212 212.957 28.373C211.772 27.3249 210.724 26.8008 209.812 26.8008C208.445 26.8008 207.465 27.5755 206.873 29.125C206.326 30.6289 206.053 32.2467 206.053 33.9785V40.8828C206.053 43.7539 206.212 45.8047 206.531 47.0352C206.622 47.3542 207.215 47.7188 208.309 48.1289C209.448 48.5391 210.2 48.7441 210.564 48.7441C210.701 48.7441 210.77 49.1315 210.77 49.9062C210.815 50.6354 210.792 51.0911 210.701 51.2734C210.154 51.2279 208.764 51.1367 206.531 51C204.298 50.8177 202.658 50.7266 201.609 50.7266C200.516 50.7266 198.807 50.8177 196.482 51C194.158 51.1367 192.745 51.2279 192.244 51.2734C192.062 51.0911 191.971 50.6354 191.971 49.9062C191.971 49.1315 192.062 48.7441 192.244 48.7441C192.745 48.7441 193.589 48.5391 194.773 48.1289C195.958 47.7188 196.596 47.3542 196.688 47.0352C197.007 45.668 197.166 43.9362 197.166 41.8398V32.4746C197.166 29.9225 196.756 28.2135 195.936 27.3477C195.617 26.9831 195.138 26.6868 194.5 26.459C193.862 26.2311 193.315 26.0716 192.859 25.9805C192.404 25.8893 192.176 25.821 192.176 25.7754C192.176 24.1803 192.29 23.3828 192.518 23.3828C193.064 23.3828 193.976 23.2689 195.252 23.041C196.528 22.7676 198.191 22.403 200.242 21.9473C202.293 21.4915 203.888 21.1497 205.027 20.9219C205.483 20.7852 205.734 20.7168 205.779 20.7168C206.007 20.7168 206.235 20.8763 206.463 21.1953C206.691 21.4688 206.805 21.6966 206.805 21.8789C206.714 22.4258 206.645 23.0182 206.6 23.6562C206.554 24.2943 206.508 24.7044 206.463 24.8867C208.696 21.9245 211.271 20.4434 214.188 20.4434Z"/>
            <path d="M235.584 20.3066C239.594 20.3066 242.557 20.7624 244.471 21.6738C244.926 23.7702 245.154 26.5957 245.154 30.1504C245.154 30.5605 244.858 30.7656 244.266 30.7656C242.853 30.7656 242.101 30.5833 242.01 30.2188C241.6 28.3047 240.893 26.8008 239.891 25.707C238.934 24.6133 237.384 24.0664 235.242 24.0664C234.24 24.0664 233.419 24.3171 232.781 24.8184C232.143 25.2741 231.824 25.9577 231.824 26.8691C231.824 27.9173 232.28 28.8288 233.191 29.6035C234.103 30.3327 235.447 31.1302 237.225 31.9961C238.455 32.5885 239.412 33.0898 240.096 33.5C240.825 33.9102 241.759 34.571 242.898 35.4824C244.083 36.3483 244.949 37.3737 245.496 38.5586C246.089 39.7435 246.385 41.0651 246.385 42.5234C246.385 45.5312 245.223 47.8099 242.898 49.3594C240.62 50.9089 237.703 51.6836 234.148 51.6836C232.553 51.6836 230.776 51.4329 228.816 50.9316C226.857 50.4303 225.444 49.8151 224.578 49.0859C224.031 45.9414 223.758 43.1615 223.758 40.7461C223.94 40.6094 224.282 40.541 224.783 40.541C226.242 40.541 226.993 40.7461 227.039 41.1562C227.814 45.668 230.275 47.9238 234.422 47.9238C235.516 47.9238 236.427 47.6732 237.156 47.1719C237.885 46.6706 238.25 45.9642 238.25 45.0527C238.25 43.9134 237.749 42.9564 236.746 42.1816C235.789 41.4069 234.035 40.3815 231.482 39.1055C228.839 37.8294 226.88 36.4395 225.604 34.9355C224.327 33.3861 223.689 31.4948 223.689 29.2617C223.689 26.1628 224.874 23.9069 227.244 22.4941C229.614 21.0358 232.394 20.3066 235.584 20.3066Z"/>
            </mask>
            <path d="M14.0312 5.95117C16.9935 5.95117 20.8216 5.9056 25.5156 5.81445C30.2096 5.67773 33.7415 5.60938 36.1113 5.60938C36.1569 6.0651 36.8177 9.4375 38.0938 15.7266C37.8659 15.9544 37.3418 16.0684 36.5215 16.0684C36.0202 16.0684 35.7012 15.9089 35.5645 15.5898C34.6986 13.8581 33.3314 12.377 31.4629 11.1465C29.5944 9.91602 27.7715 9.30078 25.9941 9.30078H23.3965C20.5254 9.30078 19.0443 9.59701 18.9531 10.1895C18.7253 11.2832 18.6113 13.0605 18.6113 15.5215V26.0488C18.6113 26.3223 19.5911 26.459 21.5508 26.459H25.1738C27.9993 26.459 29.5488 26.3678 29.8223 26.1855C30.0501 26.0033 30.2324 25.3424 30.3691 24.2031C30.4603 23.5195 30.597 22.8587 30.7793 22.2207C30.8249 21.9017 31.1667 21.7422 31.8047 21.7422C32.5794 21.7422 33.0807 21.8561 33.3086 22.084V35.0039C33.1263 35.1862 32.6478 35.2773 31.873 35.2773C31.2806 35.2773 30.916 35.0951 30.7793 34.7305C30.597 34.0924 30.4375 33.5456 30.3008 33.0898C30.1641 32.6341 30.0501 32.2923 29.959 32.0645C29.8678 31.8366 29.7539 31.6315 29.6172 31.4492C29.526 31.2669 29.4577 31.153 29.4121 31.1074C29.3665 31.0618 29.2754 31.0163 29.1387 30.9707C29.002 30.8796 28.9108 30.8112 28.8652 30.7656C28.2728 30.401 26.4954 30.2188 23.5332 30.2188C20.252 30.2188 18.6113 30.4238 18.6113 30.834V41.3613C18.6113 43.6855 18.7708 45.554 19.0898 46.9668C19.2266 47.5137 19.9785 47.9466 21.3457 48.2656C22.7129 48.5846 23.7383 48.7441 24.4219 48.7441C24.6042 48.7441 24.6953 49.1771 24.6953 50.043C24.6953 50.5898 24.6497 51 24.5586 51.2734C19.0898 51 15.6035 50.8633 14.0996 50.8633L4.11914 51.2734C3.93685 51.0911 3.8457 50.7038 3.8457 50.1113C3.8457 49.1999 3.93685 48.7441 4.11914 48.7441C4.66602 48.7441 5.50911 48.5846 6.64844 48.2656C7.83333 47.9466 8.49414 47.6048 8.63086 47.2402C8.9043 46.1921 9.04102 44.1868 9.04102 41.2246V15.3848C9.04102 12.8783 8.9043 11.1009 8.63086 10.0527C8.49414 9.68815 7.81055 9.27799 6.58008 8.82227C5.39518 8.36654 4.55208 8.13867 4.05078 8.13867C3.86849 8.13867 3.77734 7.72852 3.77734 6.9082C3.77734 6.17904 3.8457 5.74609 3.98242 5.60938C8.08398 5.83724 11.4336 5.95117 14.0312 5.95117Z" fill="white"/>
            <path d="M46.7754 14.7012C46.7754 12.5592 46.6615 10.9186 46.4336 9.7793C46.2057 9.05013 45.0208 8.68555 42.8789 8.68555H42.2637C41.9902 8.68555 41.8535 8.22982 41.8535 7.31836C41.8535 6.54362 41.9902 6.15625 42.2637 6.15625C43.6764 6.01953 45.0892 5.83724 46.502 5.60938C47.9603 5.38151 49.1908 5.15365 50.1934 4.92578C51.196 4.69792 52.0846 4.47005 52.8594 4.24219C53.6797 4.01432 54.3177 3.83203 54.7734 3.69531L55.457 3.49023H55.5938C55.776 3.49023 55.9583 3.62695 56.1406 3.90039C56.3229 4.17383 56.4368 4.42448 56.4824 4.65234C55.9811 6.70312 55.7305 9.00456 55.7305 11.5566L55.6621 40.8145C55.6621 43.7311 55.8216 45.8047 56.1406 47.0352C56.2318 47.3542 56.8698 47.7188 58.0547 48.1289C59.2396 48.5391 60.0371 48.7441 60.4473 48.7441C60.584 48.7441 60.6523 49.1315 60.6523 49.9062C60.6979 50.6354 60.6751 51.0911 60.584 51.2734C60.0827 51.2279 58.6471 51.1367 56.2773 51C53.9531 50.8177 52.2669 50.7266 51.2188 50.7266C50.125 50.7266 48.416 50.8177 46.0918 51C43.7676 51.1367 42.3548 51.2279 41.8535 51.2734C41.6712 51.0911 41.5801 50.6354 41.5801 49.9062C41.5801 49.1315 41.6712 48.7441 41.8535 48.7441C42.3548 48.7441 43.1979 48.5391 44.3828 48.1289C45.5677 47.7188 46.2057 47.3542 46.2969 47.0352C46.6159 45.668 46.7754 43.9362 46.7754 41.8398V14.7012Z" fill="white"/>
            <path d="M79.5195 24.2031C78.1979 24.2031 77.1042 24.7272 76.2383 25.7754C75.3724 26.8236 74.8027 28.0312 74.5293 29.3984C74.2559 30.7201 74.1191 32.2012 74.1191 33.8418C74.1191 43.0931 76.4661 47.7188 81.1602 47.7188C83.0742 47.7188 84.4642 46.7845 85.3301 44.916C86.2415 43.0475 86.6973 40.86 86.6973 38.3535C86.6973 28.9199 84.3047 24.2031 79.5195 24.2031ZM69.0605 24.9551C72.2051 21.9473 76.0104 20.4434 80.4766 20.4434C84.9427 20.4434 88.7253 21.9473 91.8242 24.9551C94.9688 27.9629 96.541 31.6315 96.541 35.9609C96.541 40.2904 94.9915 43.959 91.8926 46.9668C88.7936 49.9746 84.9883 51.4785 80.4766 51.4785C76.0104 51.4785 72.2051 49.9746 69.0605 46.9668C65.9616 43.959 64.4121 40.2904 64.4121 35.9609C64.4121 31.6315 65.9616 27.9629 69.0605 24.9551Z" fill="white"/>
            <path d="M145.486 26.1855C145.486 25.1829 144.894 24.4538 143.709 23.998C142.524 23.5423 141.339 23.3145 140.154 23.3145H139.881C139.699 23.3145 139.585 22.9271 139.539 22.1523C139.493 21.3776 139.562 20.8991 139.744 20.7168C140.382 20.7624 141.772 20.8763 143.914 21.0586C146.102 21.2409 147.719 21.332 148.768 21.332C149.725 21.332 151.069 21.2409 152.801 21.0586C154.533 20.8763 155.763 20.7624 156.492 20.7168C156.629 21.127 156.697 21.5827 156.697 22.084C156.697 22.8587 156.606 23.2461 156.424 23.2461C155.923 23.2461 154.92 23.6107 153.416 24.3398C151.912 25.0234 150.978 25.7754 150.613 26.5957L139.334 50.3164C139.197 50.6354 138.855 50.9544 138.309 51.2734C137.807 51.5924 137.306 51.752 136.805 51.752C136.349 51.752 136.007 51.5013 135.779 51L127.645 33.3633L119.852 50.248C119.715 50.5671 119.419 50.8861 118.963 51.2051C118.507 51.5697 117.938 51.752 117.254 51.752C116.798 51.752 116.434 51.5013 116.16 51L104.607 25.5703C104.288 24.9323 103.628 24.4082 102.625 23.998C101.622 23.5423 100.848 23.3145 100.301 23.3145C100.118 23.3145 100.027 22.8815 100.027 22.0156C100.027 21.2865 100.096 20.8535 100.232 20.7168C100.779 20.7624 102.124 20.8763 104.266 21.0586C106.453 21.1953 108.094 21.2637 109.188 21.2637C110.19 21.2637 111.922 21.1725 114.383 20.9902C116.889 20.8079 118.325 20.7168 118.689 20.7168C118.781 20.9902 118.826 21.4688 118.826 22.1523C118.872 22.7904 118.826 23.1322 118.689 23.1777C118.143 23.1777 117.299 23.4056 116.16 23.8613C115.021 24.2715 114.451 24.7728 114.451 25.3652C114.451 25.9577 116.297 30.4694 119.988 38.9004C120.49 37.8066 121.082 36.5306 121.766 35.0723C122.495 33.5684 123.019 32.4974 123.338 31.8594C123.657 31.2214 123.976 30.515 124.295 29.7402C124.66 28.9655 124.887 28.3958 124.979 28.0312C125.115 27.6667 125.184 27.3932 125.184 27.2109C125.184 26.1172 125.024 25.3197 124.705 24.8184C124.386 24.3626 123.839 23.9525 123.064 23.5879C122.472 23.36 121.538 23.2461 120.262 23.2461C120.079 23.2461 119.965 22.8815 119.92 22.1523C119.92 21.3776 120.011 20.8991 120.193 20.7168C120.786 20.7624 122.107 20.8763 124.158 21.0586C126.255 21.1953 127.85 21.2637 128.943 21.2637C129.946 21.2637 131.609 21.1725 133.934 20.9902C136.303 20.8079 137.716 20.7168 138.172 20.7168C138.263 20.9447 138.263 21.446 138.172 22.2207C138.126 22.9499 138.035 23.3145 137.898 23.3145C137.124 23.3145 136.303 23.474 135.438 23.793C134.617 24.112 134.207 24.6361 134.207 25.3652C134.207 26.0488 135.984 30.5833 139.539 38.9688C140.359 37.1914 141.294 35.209 142.342 33.0215C143.436 30.834 144.233 29.2161 144.734 28.168C145.236 27.1198 145.486 26.459 145.486 26.1855Z" fill="white"/>
            <path d="M174.812 24.2031C173.035 24.2031 171.736 25.069 170.916 26.8008C170.096 28.487 169.686 30.1504 169.686 31.791C169.686 32.0645 169.845 32.2012 170.164 32.2012H178.846C179.484 32.2012 179.803 31.7682 179.803 30.9023C179.803 29.1706 179.324 27.6211 178.367 26.2539C177.456 24.8867 176.271 24.2031 174.812 24.2031ZM175.154 20.4434C179.256 20.4434 182.537 21.8789 184.998 24.75C187.505 27.5755 188.758 30.4694 188.758 33.4316C188.758 34.4798 188.53 35.1634 188.074 35.4824C187.664 35.8014 186.821 35.9609 185.545 35.9609H170.096C169.822 35.9609 169.686 36.1204 169.686 36.4395C169.686 38.9004 170.369 41.1107 171.736 43.0703C173.149 45.0299 175.154 46.0098 177.752 46.0098C179.256 46.0098 180.691 45.8047 182.059 45.3945C183.426 44.9388 184.383 44.5514 184.93 44.2324C185.477 43.8678 186.206 43.3438 187.117 42.6602C187.527 42.8424 187.732 43.2754 187.732 43.959C187.732 44.5059 187.641 44.9616 187.459 45.3262C187.003 46.4199 185.636 47.7188 183.357 49.2227C181.079 50.7266 178.527 51.4785 175.701 51.4785C171.508 51.4785 167.885 49.9518 164.832 46.8984C161.824 43.8451 160.32 40.1764 160.32 35.8926C160.32 31.5176 161.688 27.849 164.422 24.8867C167.156 21.9245 170.734 20.4434 175.154 20.4434Z" fill="white"/>
            <path d="M214.188 20.4434C216.193 20.4434 218.152 21.2865 220.066 22.9727C220.066 25.3424 219.77 27.097 219.178 28.2363C218.631 29.3757 217.605 29.9453 216.102 29.9453C215.19 29.9453 214.142 29.4212 212.957 28.373C211.772 27.3249 210.724 26.8008 209.812 26.8008C208.445 26.8008 207.465 27.5755 206.873 29.125C206.326 30.6289 206.053 32.2467 206.053 33.9785V40.8828C206.053 43.7539 206.212 45.8047 206.531 47.0352C206.622 47.3542 207.215 47.7188 208.309 48.1289C209.448 48.5391 210.2 48.7441 210.564 48.7441C210.701 48.7441 210.77 49.1315 210.77 49.9062C210.815 50.6354 210.792 51.0911 210.701 51.2734C210.154 51.2279 208.764 51.1367 206.531 51C204.298 50.8177 202.658 50.7266 201.609 50.7266C200.516 50.7266 198.807 50.8177 196.482 51C194.158 51.1367 192.745 51.2279 192.244 51.2734C192.062 51.0911 191.971 50.6354 191.971 49.9062C191.971 49.1315 192.062 48.7441 192.244 48.7441C192.745 48.7441 193.589 48.5391 194.773 48.1289C195.958 47.7188 196.596 47.3542 196.688 47.0352C197.007 45.668 197.166 43.9362 197.166 41.8398V32.4746C197.166 29.9225 196.756 28.2135 195.936 27.3477C195.617 26.9831 195.138 26.6868 194.5 26.459C193.862 26.2311 193.315 26.0716 192.859 25.9805C192.404 25.8893 192.176 25.821 192.176 25.7754C192.176 24.1803 192.29 23.3828 192.518 23.3828C193.064 23.3828 193.976 23.2689 195.252 23.041C196.528 22.7676 198.191 22.403 200.242 21.9473C202.293 21.4915 203.888 21.1497 205.027 20.9219C205.483 20.7852 205.734 20.7168 205.779 20.7168C206.007 20.7168 206.235 20.8763 206.463 21.1953C206.691 21.4688 206.805 21.6966 206.805 21.8789C206.714 22.4258 206.645 23.0182 206.6 23.6562C206.554 24.2943 206.508 24.7044 206.463 24.8867C208.696 21.9245 211.271 20.4434 214.188 20.4434Z" fill="white"/>
            <path d="M235.584 20.3066C239.594 20.3066 242.557 20.7624 244.471 21.6738C244.926 23.7702 245.154 26.5957 245.154 30.1504C245.154 30.5605 244.858 30.7656 244.266 30.7656C242.853 30.7656 242.101 30.5833 242.01 30.2188C241.6 28.3047 240.893 26.8008 239.891 25.707C238.934 24.6133 237.384 24.0664 235.242 24.0664C234.24 24.0664 233.419 24.3171 232.781 24.8184C232.143 25.2741 231.824 25.9577 231.824 26.8691C231.824 27.9173 232.28 28.8288 233.191 29.6035C234.103 30.3327 235.447 31.1302 237.225 31.9961C238.455 32.5885 239.412 33.0898 240.096 33.5C240.825 33.9102 241.759 34.571 242.898 35.4824C244.083 36.3483 244.949 37.3737 245.496 38.5586C246.089 39.7435 246.385 41.0651 246.385 42.5234C246.385 45.5312 245.223 47.8099 242.898 49.3594C240.62 50.9089 237.703 51.6836 234.148 51.6836C232.553 51.6836 230.776 51.4329 228.816 50.9316C226.857 50.4303 225.444 49.8151 224.578 49.0859C224.031 45.9414 223.758 43.1615 223.758 40.7461C223.94 40.6094 224.282 40.541 224.783 40.541C226.242 40.541 226.993 40.7461 227.039 41.1562C227.814 45.668 230.275 47.9238 234.422 47.9238C235.516 47.9238 236.427 47.6732 237.156 47.1719C237.885 46.6706 238.25 45.9642 238.25 45.0527C238.25 43.9134 237.749 42.9564 236.746 42.1816C235.789 41.4069 234.035 40.3815 231.482 39.1055C228.839 37.8294 226.88 36.4395 225.604 34.9355C224.327 33.3861 223.689 31.4948 223.689 29.2617C223.689 26.1628 224.874 23.9069 227.244 22.4941C229.614 21.0358 232.394 20.3066 235.584 20.3066Z" fill="white"/>
            <path d="M14.0312 5.95117C16.9935 5.95117 20.8216 5.9056 25.5156 5.81445C30.2096 5.67773 33.7415 5.60938 36.1113 5.60938C36.1569 6.0651 36.8177 9.4375 38.0938 15.7266C37.8659 15.9544 37.3418 16.0684 36.5215 16.0684C36.0202 16.0684 35.7012 15.9089 35.5645 15.5898C34.6986 13.8581 33.3314 12.377 31.4629 11.1465C29.5944 9.91602 27.7715 9.30078 25.9941 9.30078H23.3965C20.5254 9.30078 19.0443 9.59701 18.9531 10.1895C18.7253 11.2832 18.6113 13.0605 18.6113 15.5215V26.0488C18.6113 26.3223 19.5911 26.459 21.5508 26.459H25.1738C27.9993 26.459 29.5488 26.3678 29.8223 26.1855C30.0501 26.0033 30.2324 25.3424 30.3691 24.2031C30.4603 23.5195 30.597 22.8587 30.7793 22.2207C30.8249 21.9017 31.1667 21.7422 31.8047 21.7422C32.5794 21.7422 33.0807 21.8561 33.3086 22.084V35.0039C33.1263 35.1862 32.6478 35.2773 31.873 35.2773C31.2806 35.2773 30.916 35.0951 30.7793 34.7305C30.597 34.0924 30.4375 33.5456 30.3008 33.0898C30.1641 32.6341 30.0501 32.2923 29.959 32.0645C29.8678 31.8366 29.7539 31.6315 29.6172 31.4492C29.526 31.2669 29.4577 31.153 29.4121 31.1074C29.3665 31.0618 29.2754 31.0163 29.1387 30.9707C29.002 30.8796 28.9108 30.8112 28.8652 30.7656C28.2728 30.401 26.4954 30.2188 23.5332 30.2188C20.252 30.2188 18.6113 30.4238 18.6113 30.834V41.3613C18.6113 43.6855 18.7708 45.554 19.0898 46.9668C19.2266 47.5137 19.9785 47.9466 21.3457 48.2656C22.7129 48.5846 23.7383 48.7441 24.4219 48.7441C24.6042 48.7441 24.6953 49.1771 24.6953 50.043C24.6953 50.5898 24.6497 51 24.5586 51.2734C19.0898 51 15.6035 50.8633 14.0996 50.8633L4.11914 51.2734C3.93685 51.0911 3.8457 50.7038 3.8457 50.1113C3.8457 49.1999 3.93685 48.7441 4.11914 48.7441C4.66602 48.7441 5.50911 48.5846 6.64844 48.2656C7.83333 47.9466 8.49414 47.6048 8.63086 47.2402C8.9043 46.1921 9.04102 44.1868 9.04102 41.2246V15.3848C9.04102 12.8783 8.9043 11.1009 8.63086 10.0527C8.49414 9.68815 7.81055 9.27799 6.58008 8.82227C5.39518 8.36654 4.55208 8.13867 4.05078 8.13867C3.86849 8.13867 3.77734 7.72852 3.77734 6.9082C3.77734 6.17904 3.8457 5.74609 3.98242 5.60938C8.08398 5.83724 11.4336 5.95117 14.0312 5.95117Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            <path d="M46.7754 14.7012C46.7754 12.5592 46.6615 10.9186 46.4336 9.7793C46.2057 9.05013 45.0208 8.68555 42.8789 8.68555H42.2637C41.9902 8.68555 41.8535 8.22982 41.8535 7.31836C41.8535 6.54362 41.9902 6.15625 42.2637 6.15625C43.6764 6.01953 45.0892 5.83724 46.502 5.60938C47.9603 5.38151 49.1908 5.15365 50.1934 4.92578C51.196 4.69792 52.0846 4.47005 52.8594 4.24219C53.6797 4.01432 54.3177 3.83203 54.7734 3.69531L55.457 3.49023H55.5938C55.776 3.49023 55.9583 3.62695 56.1406 3.90039C56.3229 4.17383 56.4368 4.42448 56.4824 4.65234C55.9811 6.70312 55.7305 9.00456 55.7305 11.5566L55.6621 40.8145C55.6621 43.7311 55.8216 45.8047 56.1406 47.0352C56.2318 47.3542 56.8698 47.7188 58.0547 48.1289C59.2396 48.5391 60.0371 48.7441 60.4473 48.7441C60.584 48.7441 60.6523 49.1315 60.6523 49.9062C60.6979 50.6354 60.6751 51.0911 60.584 51.2734C60.0827 51.2279 58.6471 51.1367 56.2773 51C53.9531 50.8177 52.2669 50.7266 51.2188 50.7266C50.125 50.7266 48.416 50.8177 46.0918 51C43.7676 51.1367 42.3548 51.2279 41.8535 51.2734C41.6712 51.0911 41.5801 50.6354 41.5801 49.9062C41.5801 49.1315 41.6712 48.7441 41.8535 48.7441C42.3548 48.7441 43.1979 48.5391 44.3828 48.1289C45.5677 47.7188 46.2057 47.3542 46.2969 47.0352C46.6159 45.668 46.7754 43.9362 46.7754 41.8398V14.7012Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            <path d="M79.5195 24.2031C78.1979 24.2031 77.1042 24.7272 76.2383 25.7754C75.3724 26.8236 74.8027 28.0312 74.5293 29.3984C74.2559 30.7201 74.1191 32.2012 74.1191 33.8418C74.1191 43.0931 76.4661 47.7188 81.1602 47.7188C83.0742 47.7188 84.4642 46.7845 85.3301 44.916C86.2415 43.0475 86.6973 40.86 86.6973 38.3535C86.6973 28.9199 84.3047 24.2031 79.5195 24.2031ZM69.0605 24.9551C72.2051 21.9473 76.0104 20.4434 80.4766 20.4434C84.9427 20.4434 88.7253 21.9473 91.8242 24.9551C94.9688 27.9629 96.541 31.6315 96.541 35.9609C96.541 40.2904 94.9915 43.959 91.8926 46.9668C88.7936 49.9746 84.9883 51.4785 80.4766 51.4785C76.0104 51.4785 72.2051 49.9746 69.0605 46.9668C65.9616 43.959 64.4121 40.2904 64.4121 35.9609C64.4121 31.6315 65.9616 27.9629 69.0605 24.9551Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            <path d="M145.486 26.1855C145.486 25.1829 144.894 24.4538 143.709 23.998C142.524 23.5423 141.339 23.3145 140.154 23.3145H139.881C139.699 23.3145 139.585 22.9271 139.539 22.1523C139.493 21.3776 139.562 20.8991 139.744 20.7168C140.382 20.7624 141.772 20.8763 143.914 21.0586C146.102 21.2409 147.719 21.332 148.768 21.332C149.725 21.332 151.069 21.2409 152.801 21.0586C154.533 20.8763 155.763 20.7624 156.492 20.7168C156.629 21.127 156.697 21.5827 156.697 22.084C156.697 22.8587 156.606 23.2461 156.424 23.2461C155.923 23.2461 154.92 23.6107 153.416 24.3398C151.912 25.0234 150.978 25.7754 150.613 26.5957L139.334 50.3164C139.197 50.6354 138.855 50.9544 138.309 51.2734C137.807 51.5924 137.306 51.752 136.805 51.752C136.349 51.752 136.007 51.5013 135.779 51L127.645 33.3633L119.852 50.248C119.715 50.5671 119.419 50.8861 118.963 51.2051C118.507 51.5697 117.938 51.752 117.254 51.752C116.798 51.752 116.434 51.5013 116.16 51L104.607 25.5703C104.288 24.9323 103.628 24.4082 102.625 23.998C101.622 23.5423 100.848 23.3145 100.301 23.3145C100.118 23.3145 100.027 22.8815 100.027 22.0156C100.027 21.2865 100.096 20.8535 100.232 20.7168C100.779 20.7624 102.124 20.8763 104.266 21.0586C106.453 21.1953 108.094 21.2637 109.188 21.2637C110.19 21.2637 111.922 21.1725 114.383 20.9902C116.889 20.8079 118.325 20.7168 118.689 20.7168C118.781 20.9902 118.826 21.4688 118.826 22.1523C118.872 22.7904 118.826 23.1322 118.689 23.1777C118.143 23.1777 117.299 23.4056 116.16 23.8613C115.021 24.2715 114.451 24.7728 114.451 25.3652C114.451 25.9577 116.297 30.4694 119.988 38.9004C120.49 37.8066 121.082 36.5306 121.766 35.0723C122.495 33.5684 123.019 32.4974 123.338 31.8594C123.657 31.2214 123.976 30.515 124.295 29.7402C124.66 28.9655 124.887 28.3958 124.979 28.0312C125.115 27.6667 125.184 27.3932 125.184 27.2109C125.184 26.1172 125.024 25.3197 124.705 24.8184C124.386 24.3626 123.839 23.9525 123.064 23.5879C122.472 23.36 121.538 23.2461 120.262 23.2461C120.079 23.2461 119.965 22.8815 119.92 22.1523C119.92 21.3776 120.011 20.8991 120.193 20.7168C120.786 20.7624 122.107 20.8763 124.158 21.0586C126.255 21.1953 127.85 21.2637 128.943 21.2637C129.946 21.2637 131.609 21.1725 133.934 20.9902C136.303 20.8079 137.716 20.7168 138.172 20.7168C138.263 20.9447 138.263 21.446 138.172 22.2207C138.126 22.9499 138.035 23.3145 137.898 23.3145C137.124 23.3145 136.303 23.474 135.438 23.793C134.617 24.112 134.207 24.6361 134.207 25.3652C134.207 26.0488 135.984 30.5833 139.539 38.9688C140.359 37.1914 141.294 35.209 142.342 33.0215C143.436 30.834 144.233 29.2161 144.734 28.168C145.236 27.1198 145.486 26.459 145.486 26.1855Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            <path d="M174.812 24.2031C173.035 24.2031 171.736 25.069 170.916 26.8008C170.096 28.487 169.686 30.1504 169.686 31.791C169.686 32.0645 169.845 32.2012 170.164 32.2012H178.846C179.484 32.2012 179.803 31.7682 179.803 30.9023C179.803 29.1706 179.324 27.6211 178.367 26.2539C177.456 24.8867 176.271 24.2031 174.812 24.2031ZM175.154 20.4434C179.256 20.4434 182.537 21.8789 184.998 24.75C187.505 27.5755 188.758 30.4694 188.758 33.4316C188.758 34.4798 188.53 35.1634 188.074 35.4824C187.664 35.8014 186.821 35.9609 185.545 35.9609H170.096C169.822 35.9609 169.686 36.1204 169.686 36.4395C169.686 38.9004 170.369 41.1107 171.736 43.0703C173.149 45.0299 175.154 46.0098 177.752 46.0098C179.256 46.0098 180.691 45.8047 182.059 45.3945C183.426 44.9388 184.383 44.5514 184.93 44.2324C185.477 43.8678 186.206 43.3438 187.117 42.6602C187.527 42.8424 187.732 43.2754 187.732 43.959C187.732 44.5059 187.641 44.9616 187.459 45.3262C187.003 46.4199 185.636 47.7188 183.357 49.2227C181.079 50.7266 178.527 51.4785 175.701 51.4785C171.508 51.4785 167.885 49.9518 164.832 46.8984C161.824 43.8451 160.32 40.1764 160.32 35.8926C160.32 31.5176 161.688 27.849 164.422 24.8867C167.156 21.9245 170.734 20.4434 175.154 20.4434Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            <path d="M214.188 20.4434C216.193 20.4434 218.152 21.2865 220.066 22.9727C220.066 25.3424 219.77 27.097 219.178 28.2363C218.631 29.3757 217.605 29.9453 216.102 29.9453C215.19 29.9453 214.142 29.4212 212.957 28.373C211.772 27.3249 210.724 26.8008 209.812 26.8008C208.445 26.8008 207.465 27.5755 206.873 29.125C206.326 30.6289 206.053 32.2467 206.053 33.9785V40.8828C206.053 43.7539 206.212 45.8047 206.531 47.0352C206.622 47.3542 207.215 47.7188 208.309 48.1289C209.448 48.5391 210.2 48.7441 210.564 48.7441C210.701 48.7441 210.77 49.1315 210.77 49.9062C210.815 50.6354 210.792 51.0911 210.701 51.2734C210.154 51.2279 208.764 51.1367 206.531 51C204.298 50.8177 202.658 50.7266 201.609 50.7266C200.516 50.7266 198.807 50.8177 196.482 51C194.158 51.1367 192.745 51.2279 192.244 51.2734C192.062 51.0911 191.971 50.6354 191.971 49.9062C191.971 49.1315 192.062 48.7441 192.244 48.7441C192.745 48.7441 193.589 48.5391 194.773 48.1289C195.958 47.7188 196.596 47.3542 196.688 47.0352C197.007 45.668 197.166 43.9362 197.166 41.8398V32.4746C197.166 29.9225 196.756 28.2135 195.936 27.3477C195.617 26.9831 195.138 26.6868 194.5 26.459C193.862 26.2311 193.315 26.0716 192.859 25.9805C192.404 25.8893 192.176 25.821 192.176 25.7754C192.176 24.1803 192.29 23.3828 192.518 23.3828C193.064 23.3828 193.976 23.2689 195.252 23.041C196.528 22.7676 198.191 22.403 200.242 21.9473C202.293 21.4915 203.888 21.1497 205.027 20.9219C205.483 20.7852 205.734 20.7168 205.779 20.7168C206.007 20.7168 206.235 20.8763 206.463 21.1953C206.691 21.4688 206.805 21.6966 206.805 21.8789C206.714 22.4258 206.645 23.0182 206.6 23.6562C206.554 24.2943 206.508 24.7044 206.463 24.8867C208.696 21.9245 211.271 20.4434 214.188 20.4434Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            <path d="M235.584 20.3066C239.594 20.3066 242.557 20.7624 244.471 21.6738C244.926 23.7702 245.154 26.5957 245.154 30.1504C245.154 30.5605 244.858 30.7656 244.266 30.7656C242.853 30.7656 242.101 30.5833 242.01 30.2188C241.6 28.3047 240.893 26.8008 239.891 25.707C238.934 24.6133 237.384 24.0664 235.242 24.0664C234.24 24.0664 233.419 24.3171 232.781 24.8184C232.143 25.2741 231.824 25.9577 231.824 26.8691C231.824 27.9173 232.28 28.8288 233.191 29.6035C234.103 30.3327 235.447 31.1302 237.225 31.9961C238.455 32.5885 239.412 33.0898 240.096 33.5C240.825 33.9102 241.759 34.571 242.898 35.4824C244.083 36.3483 244.949 37.3737 245.496 38.5586C246.089 39.7435 246.385 41.0651 246.385 42.5234C246.385 45.5312 245.223 47.8099 242.898 49.3594C240.62 50.9089 237.703 51.6836 234.148 51.6836C232.553 51.6836 230.776 51.4329 228.816 50.9316C226.857 50.4303 225.444 49.8151 224.578 49.0859C224.031 45.9414 223.758 43.1615 223.758 40.7461C223.94 40.6094 224.282 40.541 224.783 40.541C226.242 40.541 226.993 40.7461 227.039 41.1562C227.814 45.668 230.275 47.9238 234.422 47.9238C235.516 47.9238 236.427 47.6732 237.156 47.1719C237.885 46.6706 238.25 45.9642 238.25 45.0527C238.25 43.9134 237.749 42.9564 236.746 42.1816C235.789 41.4069 234.035 40.3815 231.482 39.1055C228.839 37.8294 226.88 36.4395 225.604 34.9355C224.327 33.3861 223.689 31.4948 223.689 29.2617C223.689 26.1628 224.874 23.9069 227.244 22.4941C229.614 21.0358 232.394 20.3066 235.584 20.3066Z" stroke="#3F4C4F" strokeWidth="6" strokeLinejoin="round" mask="url(#path-1-outside-1)"/>
            </g>
            <defs>
            <filter id="filter0_d" x="0.777344" y="0.490234" width="252.607" height="58.2617" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
            <feFlood floodOpacity="0" result="BackgroundImageFix"/>
            <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
            <feOffset dx="4" dy="4"/>
            <feComposite in2="hardAlpha" operator="out"/>
            <feColorMatrix type="matrix" values="0 0 0 0 0.247059 0 0 0 0 0.298039 0 0 0 0 0.309804 0 0 0 1 0"/>
            <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
            <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
            </filter>
            </defs>
          </svg>
        </header>

        <div className="h-8"></div>

        <div className="md:flex justify-between">
          <div className="w-full flex-auto text-sm leading-normal md:max-w-xs">
            <p className="mb-4">
              Fully on-chain, randomly generated unique flowers. For you, or a special someone in your life 🌼
            </p>
            <p className="mb-4">
              Flowers are composed of unique petal designs and many colors – all of which come together to make each flower uniquely yours.
            </p>
            <p className="mb-4">
              Flowers is the first of five projects created as part of the on-chain collective. 
              Our goal is to channel our shared love for art and technology, and use completely on-chain tech 
              to make beautiful things for you to hold on to and enjoy, or to share with a friend :)
            </p>
          </div>

          <div className="h-6 md:hidden"></div>

          <div className="flex-0 w-full flex flex-col md:ml-6 space-y-4 md:max-w-xs">
            {!active && (
              <ConnectButtons setWorking={setWorking} activate={activate} />
            )}
            {active && (
              <div>
                {/* <div className="h-2"></div>

                <div className="flex flex-row">
                  <input
                    ref={friendField}
                    className="input text-sm md:text-lg rounded-2xl rounded-b-none"
                    value={friendAddress}
                    onChange={(event) => {
                      setFriendAddress(event.target.value);
                    }}
                    disabled={false}
                    placeholder={"0x… or ENS domain"}
                  />
                  <MintButton
                    disabled={false}
                    className="rounded-2xl rounded-t-none"
                    onClick={craftForFriend}
                  >
                    Mint for a friend (Ξ0.01)
                  </MintButton>
                </div>

                {realFriendAddress && (
                  <div className="text-sm truncate">
                    Sending to{" "}
                    <code className="bg-gray-100" title={realFriendAddress}>
                      {realFriendAddress}
                    </code>
                  </div>
                )} */}

                {/* <div className="h-2"></div> */}

                {transactionHash && (
                  <div className="text-green-500 text-xs flex flex-col space-y-2">
                    <span>Success!</span>
                    <a
                      href={`https://etherscan.io/tx/${transactionHash}`}
                      className="btn font-normal bg-gray-100 rounded-full shadow-md"
                    >
                      View transaction on Etherscan
                    </a>
                  </div>
                )}
                {error && (
                  <div className="text-red-500 text-xs">{error.message}</div>
                )}

                <div className="text-sm space-y-2 leading-normal">
                  <p>
                    <strong>Each flower cost you Ξ0.01 + gas fees to mint</strong>{" "}
                  </p>
                  <p className='mb-8'>
                    The flowers generated will be different depending on your wallet address
                  </p>
                  {/* <p>
                    You can mint one for yourself or for a friend. The flowers generated
                    will be different depending on its number and the
                    destination address.
                  </p> */}

                  <MintButton
                    disabled={working || soldOut}
                    onClick={craftForSelf}
                    className="p-2 text-center"
                  >
                    Mint Now
                  </MintButton>

                  <p className="pt-8">
                    {yearTotal}/5,000 flowers have been minted in{" "}
                    {new Date().getFullYear()}.
                  </p>

                  {/* <progress className="w-full" max={1000} value={yearTotal} /> */}

                  {/* <p>
                    If all 1,000 cranes are minted in a year, holders get to
                    mint a <em>Special Edition Mega Luck</em> crane for free (gas only.)
                  </p> */}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="flex justify-center">
        <img src="/last-0.svg" className="" />
      </div>

      <div className="p-5 md:p-16 ">
      <h1 className="mb-4">FAQ</h1>
        <div className="md:flex justify-between flex-row text-sm">
          <div className="w-full flex-auto text-sm leading-normal md:max-w-xs">
            <div className="mb-4">
              <H4>Why flowers?</H4>
              <p className="mt-1">Ask yourself – why not?</p>
            </div>
            <div className="mb-4">
              <H4>Who made this?</H4>
              <p className="mt-1">
                Flowers, and the upcoming releases under by the <em>on-chain collective</em> are designed and coded 
                by {' '}
                <A href="https://screenshake.co">
                  Saransh Sinha
                </A> & <A href="https://nitinrgupta.com">
                  Nitin Gupta
                </A>
                
              </p>
            </div>
            <div className="mb-4">
              <H4>
                What does fully on-chain mean?
              </H4>
              <p className="mt-1">
                Most recently popularized by the loot project, on-chain implies that the ingredients that make up your NFT, 
                it’s metadata and the image iself are generated and stored on the Ethereum blockchain. Flowers are generated 
                and stored on-chain, and thus will exist as long as the Ethereum blockchain continues to.
              </p>
            </div>
            <div className="mb-4">
              <H4>How do I buy one?</H4>
              <p className="mt-1">
              You’ll need an Ethereum wallet. 🌈 Rainbow or Metamask works. Just connect your Ethereum wallet using the buttons 
              on the top, and then use this website to mint your flowers. You can mint at most 10 flowers per transaction, 
              until supplies last.
              </p>
            </div>
            <div className="mb-4">
              <H4>Where is the discord?</H4>
              <p className="mt-1">
                There isn’t one (at this time). But we do have a twitter account for announcements and will be looking into 
                discord if y’all want a place to hang and talk about flowers 🌸
              </p>
            </div>
          </div>
          <div className="w-full flex-auto text-sm leading-normal md:max-w-xs">
            <H4>What are the traits & rarity levels of these traits?</H4>
            <p className="mt-1">
              Before we talk about this – this is a strange question to ask about art. We believe that art can be enjoyed, 
              more often than not, for its own sake. That said – if you must know: 
            </p>
            <li>7 unique petal styles</li>
            <li>4 to 20 petals (slight variance in range, based on the petal style)</li>
            <li>Randomized core size</li>
            <li>38 possible colors</li>
            <li>Base and overlay colors for background</li>
            <p>
              And a 1 in 1000 chance for your flower to be... weird
            </p>
          </div>
        </div>
      </div>
      <div className="text-sm p-5 md:p-16">
        <A href="https://etherscan.io/address/0xc3f5e8a98b3d97f19938e4673fd97c7cfd155577">
          Contract
        </A>{" "}
        &bull;{" "}
        <A href="https://opensea.io/collection/cranes-for-special-wallets">
          OpenSea
        </A>{" "}
      </div>
    </main>
  );
}

const A = (props) => <a className="text-blue-500 underline" {...props} />;
const H4 = (props) => <h4 className="font-bold" {...props} />;
const Answer = (props) => <div className="font-light" {...props} />;

function ConnectButtons({ activate, setWorking }) {
  const cls =
    "btn bg-white dark:bg-white rounded-full inline-flex images-center space-x-2 shadow-md border w-full text-base font-normal";
  return (
    <>
      <h3>Connect your wallet</h3>
      <div className="flex flex-col md:flex-col items-start space-y-4">
        <button
          onClick={() => {
            setWorking(true);
            activate(injected);
          }}
          className={cn(cls, "text-yellow-600 border-yellow-600")}
        >
          <img src="/metamask-fox.svg" className="h-5 w-5" />
          <span>Metamask</span>
        </button>
        <button
          onClick={() => {
            setWorking(true);
            activate(wcConnector);
          }}
          className={cn(cls, "text-blue-500 border-blue-600")}
        >
          <img src="/walletconnect-logo.svg" className="h-5 w-5" />
          <span>WalletConnect</span>
        </button>
      </div>
    </>
  );
}

function MintButton({ className, ...props }) {
  return (
    <button
      className={cn(
        "btn bg-white dark:bg-white rounded-full shadow-md border w-full text-base text-center font-normal",
        className
      )}
      {...props}
    />
  );
}
